import streamlit as st
from rule_based_system import get_symptoms_list, diagnose_diseases
from generative_ai import configure_generative_ai, get_generative_advice
from visualizations import create_diagnosis_chart

# --- Page Configuration ---
st.set_page_config(
    page_title="Poultry Health Management System",
    page_icon="üêî",
    layout="wide"
)

# --- Configure API at the start ---
# This function will check for the secret key and stop the app if not found
configure_generative_ai()

# --- Main Application UI ---
st.title("üêî Intelligent Poultry Health Management System")
st.markdown("""
This expert system provides a preliminary diagnosis of poultry diseases based on observable symptoms. 
Select the symptoms from the sidebar, and the system will analyze them, suggest potential diseases, 
and provide detailed management advice generated by AI.
""")

# --- Sidebar for User Input ---
st.sidebar.header("Symptom Selection")
symptoms_list = get_symptoms_list()
selected_symptoms = st.sidebar.multiselect(
    "Choose all applicable symptoms from the list:",
    options=symptoms_list
)

# --- Diagnosis Button ---
if st.sidebar.button("Analyze and Diagnose", type="primary"):
    if not selected_symptoms:
        st.warning("Please select at least one symptom from the list to get a diagnosis.")
    else:
        try:
            with st.spinner("Analyzing symptoms with the rule-based system..."):
                disease_scores = diagnose_diseases(selected_symptoms)

            st.header("Diagnosis Results")

            if not disease_scores:
                st.info("Based on the selected symptoms, no specific disease could be identified with high confidence. Please ensure you have selected all relevant symptoms or consult a veterinarian.")
            else:
                st.subheader("Likelihood of Potential Diseases")
                fig = create_diagnosis_chart(disease_scores)
                if fig:
                    st.plotly_chart(fig, use_container_width=True)
                
                st.header("Expert Advice & Management Plan")
                sorted_diseases = sorted(disease_scores.items(), key=lambda item: item[1], reverse=True)

                for disease, score in sorted_diseases:
                    with st.expander(f"**{disease}** (Likelihood Score: {score})", expanded=True):
                        with st.spinner(f"Generating detailed advice for {disease}..."):
                            advice = get_generative_advice(disease)
                            st.markdown(advice)

        except Exception as e:
            st.error(f"An unexpected error occurred: {e}")

# --- Disclaimer ---
st.markdown("---")
st.warning(
    "**Disclaimer:** This tool provides a preliminary diagnosis for informational purposes only. "
    "It is not a substitute for professional veterinary advice. Always consult a qualified veterinarian "
    "for an accurate diagnosis and treatment plan for your flock."
)